yay
reboot
yay
yay -Syy
clear
$ git clone https://github.com/endeavouros-team/endeavouros-i3wm-setup.git
$ cd endeavouros-i3wm-setup/etc/skel/
git clone https://github.com/endeavouros-team/endeavouros-i3wm-setup.git;cd endeavouros-i3wm-setup/etc/skel/;
cp .Xresources "${HOME}"/.Xresources
; cp -R .config/* "${HOME}"/.config/
cp .Xresources "${HOME}"/.Xresources; cp -R .config/* "${HOME}"/.config/
chmod -R +x "${HOME}"/.config/i3/scripts
dbus-launch dconf load / < xed.dconf
 wget https://raw.githubusercontent.com/endeavouros-team/endeavouros-i3wm-setup/main/i3_install; ./i3_install
chmod +x i3_install 
./i3_install
sudo systemctl restart sddm
clear
cd
wget https://raw.githubusercontent.com/endeavouros-team/endeavouros-i3wm-setup/main/i3_install; chmod +x i3_install; ./i3_install;
nano i3_install 
git clone https://github.com/endeavouros-team/endeavouros-i3wm-setup.git; cd endeavouros-i3wm-setup/etc/skel/
cd endeavouros-i3wm-setup/
ls
cd etc/skel/
ls
ls
ls -a
cd .local
ls
ls
cd share/
ls
cp * ~/.local/share/
cp * ~/.local/share/ -r
cd ../../
ls
ls -a
cd .icons
ls
cd default/
ls
cd ../
cd ../
cp .icons ~/
cp .icons ~/ -r
ls
ls -a
cd .config
ls
cp ./* ~/.config/
cp ./* ~/.config/ -r
cd ~/.config
ls
mv example.picom.conf picom.conf
sudo systemctl restart sddm
yay -S picom
sudo systemctl restart sddm
nvim "${HOME}"/.config/i3/config
vim "${HOME}"/.config/i3/config
nano "${HOME}"/.config/i3/config
blueberry
yay -S blueberry
blueberry
yay -S xfce4-clipman
yay -S clipman
yay -S xfce-clipman
yay -Ss clipman
yay -S xfce4-clipman-plugin
xfce4-clipman
nano "${HOME}"/.config/i3/config
yay -S nvim
nvim ~/.config/picom.conf 
cd .config
mv picom.conf picom.conf.bk
touch picom.conf
nvim picom.conf
exit
sudo systemctl restart sddm
brightnessctl
yay -S brightnessctl
yay -S xbacklight
xbacklight 
exit
ls
nvim --clean volume_brightness.sh 
xbacklight -A 10
xbacklight =10
xbacklight =10%
xbacklight - 10%
xbacklight -dec 10%
xbacklight -dec 10
xbacklight -dec 100
xbacklight -dec 100%
xbacklight -get
xbacklight --help
xbacklight -d
xbacklight -d 0
xrandr
xbacklight -d eDP-0
xbacklight -d eDP
xbacklight -d Screen0
xbacklight -d eDP-1
xbacklight -d eDP-1 -get
exit
clear
yay -S xborder
yay -Ss xborder
yay -Ss xborder-git
yay -S xborder-git
clear
muneeb123
yay -S xborder-git
sudo su
su root
xborders
yay -Rns xborders
su root
yay -Ss phpstorm
git clone https://github.com/muneebusmani/nvim ~/.config/nvim
cd .config
git clone https://github.com/muneebusmani/kitty
yay -S kitty
sudo su
su root
brightnessctl set 1%+
brightnessctl set 1%+
brightnessctl set 10%-
brightnessctl set 10%-
brightnessctl set 10%-
brightnessctl set 10%-
brightnessctl set 10%-
brightnessctl set 10%-
brightnessctl set 100%-
brightnessctl set 10%-
brightnessctl set 10%-

brightnessctl set 5%
brightnessctl set 5%
brightnessctl set 5%
brightnessctl set 5%+
brightnessctl set 5%+
brightnessctl set 5%+
brightnessctl set 5%+
nvim .
 brightnessctl set 1%+ && dunstify -t 1000 -r 2539 -u normal "  $(xbacklight -get | cut -d '.' -f 1)%"  -h int:value:$(xbacklight -get | cut -d '.' -f 1) -h string:hlcolor:#7f7fff
xbacklight
yay -Ss xbacklight
yay -S acpilight
xbacklight
brightnessctl
brightnessctl --help
brightnessctl
brightnessctl -10
brightnessctl -10%
brightnessctl 10%-
brightnessctl 10%-
brightnessctl 10%-
brightnessctl 50%-
brightnessctl 50-
brightnessctl 500-
brightnessctl 500
brightnessctl 500
brightnessctl 500
brightnessctl 500+
brightnessctl 500+
brightnessctl 500+
brightnessctl 500+
cd i3
cd scripts/
nvim volume_brightness.sh 
cd ..
nvim .
pipewire
sudo systemctl status pipewire
sudo systemctl enable --now pipewire
sudo systemctl enable pulseaudio
sudo systemctl status  pulseaudio
sudo systemctl status  sound
pipewire-pulse
sudo pipewire-pulse
reboot
yay -S pavucontrol
pavucontrol 
exir
exit
xborders
yay -S xborder-git
xborders 
nvim /usr/bin/xborders
nvim /usr/bin/xborders
sudo pacman -S libwnck3
yay -S python-cairo
yay -S python-requests
xborders
xborders
nvim ~/.config/i3/config 
exit
nvim powersave.sh
nvim powersave.sh
killall picom xborders
exec picom
nvim ~/powersave.sh 
chmod +x powersave.sh 
./powersave.sh 
exec ./powersave.sh 
./powersave.sh 
nvim ~/powersave.sh 
cp powersave.sh ~/.config/i3/scripts/
cd ~/.config/i3/scripts/
cd ../
nvim .
q
exit
killall picom
killall xborder
exit
nvim ~/.config/i3/scripts/powersave.sh 
 /etc/xdg/picom.conf
yay -S xsel
nvim ~/.config/kitty/
exit
nvim ~/.config/kitty/
exit
yay -S zsh
yay -S tmux
ay -S tmux tmux-plugin-manager 
yay -S tmux tmux-plugin-manager 
yay -S wine
lsblk
ls
zsh
cp ~/linux/zsh/ ~/
cp ~/linux/zsh/ ~/ -rf
ls
cp ~/linux/zsh ~/
cp ~/linux/zsh ~/ -r
rm ~/zsh
rm ~/zsh -rf
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
touch */page.tsx
exit
warp-terminal 
nvim /usr/bin/warp-terminal 
crontab
exit
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
rofi
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
exit
declare -A menu=(   [" Performance"]="powerprofilesctl set performance"   [" Balanced"]="powerprofilesctl set balanced"   [" Power Saver"]="powerprofilesctl set power-saver" )
selection=$(printf '%s\n' "${!menu[@]}" | rofi -dmenu -i -p "Power Mode")
[[ $selection ]] && ${menu[$selection]} &
#!/usr/bin/env bash
# Colors
FG_COLOR="#bbbbbb"
BG_COLOR="#111111"
HLFG_COLOR="#111111"
HLBG_COLOR="#bbbbbb"
BORDER_COLOR="#222222"
ROFI_OPTIONS=(-theme ~/.config/rofi/power-profiles.rasi)
# Menu options (no dynamic checks — assumed known)
declare -A menu=(   [" Performance"]="powerprofilesctl set performance"   [" Balanced"]="powerprofilesctl set balanced"   [" Power Saver"]="powerprofilesctl set power-saver"   [" Cancel"]="" )
menu_nrows=${#menu[@]}
# Prepare rofi launcher
rofi_colors=(-bc "${BORDER_COLOR}" -bg "${BG_COLOR}" -fg "${FG_COLOR}"     -hlfg "${HLFG_COLOR}" -hlbg "${HLBG_COLOR}")
launcher_exe="rofi"
launcher_options=(-dmenu -i -lines "${menu_nrows}" "${rofi_colors[@]}" "${ROFI_OPTIONS[@]}")
# Display menu
selection=$(printf '%s\n' "${!menu[@]}" | sort | "${launcher_exe}" "${launcher_options[@]}")
# Execute selection
if [[ $? -eq 0 && -n "${selection}" ]]; then   cmd="${menu[$selection]}";   if [[ -n "$cmd" ]]; then     i3-msg -q "exec --no-startup-id ${cmd}";   fi; fi
#!/usr/bin/env bash
# Colors
FG_COLOR="#bbbbbb"
BG_COLOR="#111111"
HLFG_COLOR="#111111"
HLBG_COLOR="#bbbbbb"
BORDER_COLOR="#222222"
ROFI_OPTIONS=(-theme ~/.config/rofi/power-profiles.rasi)
# Menu options (no dynamic checks — assumed known)
declare -A menu=(   [" Performance"]="powerprofilesctl set performance"   [" Balanced"]="powerprofilesctl set balanced"   [" Power Saver"]="powerprofilesctl set power-saver"   [" Cancel"]="" )
menu_nrows=${#menu[@]}
# Prepare rofi launcher
rofi_colors=(-bc "${BORDER_COLOR}" -bg "${BG_COLOR}" -fg "${FG_COLOR}"     -hlfg "${HLFG_COLOR}" -hlbg "${HLBG_COLOR}")
launcher_exe="rofi"
launcher_options=(-dmenu -i -lines "${menu_nrows}" "${rofi_colors[@]}" "${ROFI_OPTIONS[@]}")
# Display menu
selection=$(printf '%s\n' "${!menu[@]}" | sort | "${launcher_exe}" "${launcher_options[@]}")
# Execute selection
if [[ $? -eq 0 && -n "${selection}" ]]; then   cmd="${menu[$selection]}";   if [[ -n "$cmd" ]]; then     i3-msg -q "exec --no-startup-id ${cmd}";   fi; fi
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
	WALLPAPER_DIR="$HOME/wallpapers/wallpapers"
	mapfile -t FILES < <(find "$WALLPAPER_DIR" -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \))
	RANDOM_FILE="${FILES[RANDOM % ${#FILES[@]}]}"
	nitrogen --set-zoom-fill "$RANDOM_FILE" --save
#! /usr/bin/env bash
###### Variables ######
DATEFTM="${DATEFTM:-+%a %d %b %Y}"
SHORTFMT="${SHORTFMT:-+%d/%m/%Y}"
LABEL="${LABEL:- }"
FONT="${FONT:-Monospace 10}"
LEFTCLICK_PREV_MONTH=${LEFTCLICK_PREV_MONTH:-false}
PREV_MONTH_TEXT="${PREV_MONTH_TEXT:-« previous month «}"
NEXT_MONTH_TEXT="${NEXT_MONTH_TEXT:-» next month »}"
ROFI_CONFIG_FILE="${ROFI_CONFIG_FILE:-/dev/null}"
BAR_POSITION="${BAR_POSITION:-bottom}"
WEEK_START="${WEEK_START:-monday}"
###### Variables ######
###### Functions ######
# get current date and set today header
get_current_date() {   year=$(date '+%Y');   month=$(date '+%m');   day=$(date '+%d'); }
# print the selected month
print_month() {   mnt=$1;   yr=$2;   cal --color=always --$WEEK_START $mnt $yr     | sed -e 's/\x1b\[[7;]*m/\<b\>\<u\>/g'           -e 's/\x1b\[[27;]*m/\<\/u\>\<\/b\>/g'           -e '/^ *$/d'     | tail -n +2;   echo $PREV_MONTH_TEXT$'\n'$NEXT_MONTH_TEXT; }
# increment year and/or month appropriately based on month increment
increment_month() {
  incr=$1;   (( delta += incr ))
  if (( incr != 0 )); then
    month=$(( 10#$month + incr ))
    if (( month > 0 )); then       (( month -= 1 ));       (( year += month/12 ));       (( month %= 12 ));       (( month += 1 ));     else       (( year += month/12 - 1 ));       (( month %= 12 ));       (( month += 12 ));     fi;   fi
  if (( delta == 0 )); then
    header=$(date "$DATEFTM");   else
    header=$(cal $month $year | sed -n '1s/^ *\(.*[^ ]\) *$/\1/p');   fi; }
###### Functions ######
###### Main body ######
get_current_date
# handle the click
# variables:
#   current_row: set means today row is highlighted
#   current_row: not set means...
#     bias_row ==  0: `next month` row is highlighted
#     bias_row == -1: `prev month` row is highlighted
#   selected: contains the selected row (next or prev month)
#   month_page: the month to be printed
case "$BLOCK_BUTTON" in   1)     if [[ $LEFTCLICK_PREV_MONTH == true ]]; then       increment_month -1;       bias_row=-1;     else       increment_month 0;       current_row=;     fi;     ;;   2)     increment_month 0;     current_row=;     ;;   3)     increment_month +1;     bias_row=0;     ;; esac
# rofi pop up
case "$BLOCK_BUTTON" in   1|2|3)
    while [[ "${selected+xxx}" != "xxx" ]] || [[ $selected =~ ($PREV_MONTH_TEXT|$NEXT_MONTH_TEXT) ]]; do       IFS=;       month_page=$(print_month $month $year);       if [[ "${current_row+xxx}" = "xxx" ]]; then         current_row=$(( $(echo $month_page | grep -n ${day#0} | head -n 1 | cut -d: -f1) - 1 ));       else         current_row=$(( $(echo $month_page | wc -l) - 1));       fi; 
      if [[ $BAR_POSITION = "top" ]]; then         anchor="northeast";       else         anchor="southeast";       fi; 
      selected="$(echo $month_page \
        | rofi \
            -dmenu \
            -markup-rows \
            -font $FONT \
            -m -3 \
            -theme-str 'window {width: 10%; anchor: '"$anchor"'; location: northwest;}' \
            -theme-str 'listview {lines: '"$(echo $month_page | wc -l)"' ;scrollbar: false;}' \
            -theme $ROFI_CONFIG_FILE \
            -selected-row $(( current_row + bias_row )) \
            -p "$header")"
      [[ $selected =~ $PREV_MONTH_TEXT ]] && { increment_month -1; bias_row=-1; };       [[ $selected =~ $NEXT_MONTH_TEXT ]] && { increment_month +1; bias_row=0; }
      unset current_row;     done; esac
# print blocklet text
echo $LABEL$(date "$DATEFTM")
echo $LABEL$(date "$SHORTFMT")
###### Main body ######
###### Main body ######
#! /usr/bin/env bash
###### Variables ######
DATEFTM="${DATEFTM:-+%a %d %b %Y}"
SHORTFMT="${SHORTFMT:-+%d/%m/%Y}"
LABEL="${LABEL:- }"
FONT="${FONT:-Monospace 10}"
LEFTCLICK_PREV_MONTH=${LEFTCLICK_PREV_MONTH:-false}
PREV_MONTH_TEXT="${PREV_MONTH_TEXT:-« previous month «}"
NEXT_MONTH_TEXT="${NEXT_MONTH_TEXT:-» next month »}"
ROFI_CONFIG_FILE="${ROFI_CONFIG_FILE:-/dev/null}"
BAR_POSITION="${BAR_POSITION:-bottom}"
WEEK_START="${WEEK_START:-monday}"
###### Variables ######
###### Functions ######
# get current date and set today header
get_current_date() {   year=$(date '+%Y');   month=$(date '+%m');   day=$(date '+%d'); }
# print the selected month
print_month() {   mnt=$1;   yr=$2;   cal --color=always --$WEEK_START $mnt $yr     | sed -e 's/\x1b\[[7;]*m/\<b\>\<u\>/g'           -e 's/\x1b\[[27;]*m/\<\/u\>\<\/b\>/g'           -e '/^ *$/d'     | tail -n +2;   echo $PREV_MONTH_TEXT$'\n'$NEXT_MONTH_TEXT; }
# increment year and/or month appropriately based on month increment
increment_month() {
  incr=$1;   (( delta += incr ))
  if (( incr != 0 )); then
    month=$(( 10#$month + incr ))
    if (( month > 0 )); then       (( month -= 1 ));       (( year += month/12 ));       (( month %= 12 ));       (( month += 1 ));     else       (( year += month/12 - 1 ));       (( month %= 12 ));       (( month += 12 ));     fi;   fi
  if (( delta == 0 )); then
    header=$(date "$DATEFTM");   else
    header=$(cal $month $year | sed -n '1s/^ *\(.*[^ ]\) *$/\1/p');   fi; }
###### Functions ######
###### Main body ######
get_current_date
# handle the click
# variables:
#   current_row: set means today row is highlighted
#   current_row: not set means...
#     bias_row ==  0: `next month` row is highlighted
#     bias_row == -1: `prev month` row is highlighted
#   selected: contains the selected row (next or prev month)
#   month_page: the month to be printed
case "$BLOCK_BUTTON" in   1)     if [[ $LEFTCLICK_PREV_MONTH == true ]]; then       increment_month -1;       bias_row=-1;     else       increment_month 0;       current_row=;     fi;     ;;   2)     increment_month 0;     current_row=;     ;;   3)     increment_month +1;     bias_row=0;     ;; esac
# rofi pop up
case "$BLOCK_BUTTON" in   1|2|3)
    while [[ "${selected+xxx}" != "xxx" ]] || [[ $selected =~ ($PREV_MONTH_TEXT|$NEXT_MONTH_TEXT) ]]; do       IFS=;       month_page=$(print_month $month $year);       if [[ "${current_row+xxx}" = "xxx" ]]; then         current_row=$(( $(echo $month_page | grep -n ${day#0} | head -n 1 | cut -d: -f1) - 1 ));       else         current_row=$(( $(echo $month_page | wc -l) - 1));       fi; 
      if [[ $BAR_POSITION = "top" ]]; then         anchor="northeast";       else         anchor="southeast";       fi; 
      selected="$(echo $month_page \
        | rofi \
            -dmenu \
            -markup-rows \
            -font $FONT \
            -m -3 \
            -theme-str 'window {width: 10%; anchor: '"$anchor"'; location: northwest;}' \
            -theme-str 'listview {lines: '"$(echo $month_page | wc -l)"' ;scrollbar: false;}' \
            -theme $ROFI_CONFIG_FILE \
            -selected-row $(( current_row + bias_row )) \
            -p "$header")"
      [[ $selected =~ $PREV_MONTH_TEXT ]] && { increment_month -1; bias_row=-1; };       [[ $selected =~ $NEXT_MONTH_TEXT ]] && { increment_month +1; bias_row=0; }
      unset current_row;     done; esac
# print blocklet text
echo $LABEL$(date "$DATEFTM")
echo $LABEL$(date "$SHORTFMT")
###### Main body ######
#! /usr/bin/env bash
###### Variables ######
DATEFTM="${DATEFTM:-+%a %d %b %Y}"
SHORTFMT="${SHORTFMT:-+%d/%m/%Y}"
LABEL="${LABEL:- }"
FONT="${FONT:-Monospace 10}"
LEFTCLICK_PREV_MONTH=${LEFTCLICK_PREV_MONTH:-false}
PREV_MONTH_TEXT="${PREV_MONTH_TEXT:-« previous month «}"
NEXT_MONTH_TEXT="${NEXT_MONTH_TEXT:-» next month »}"
ROFI_CONFIG_FILE="${ROFI_CONFIG_FILE:-/dev/null}"
BAR_POSITION="${BAR_POSITION:-bottom}"
WEEK_START="${WEEK_START:-monday}"
###### Variables ######
###### Functions ######
# get current date and set today header
get_current_date() {   year=$(date '+%Y');   month=$(date '+%m');   day=$(date '+%d'); }
# print the selected month
print_month() {   mnt=$1;   yr=$2;   cal --color=always --$WEEK_START $mnt $yr     | sed -e 's/\x1b\[[7;]*m/\<b\>\<u\>/g'           -e 's/\x1b\[[27;]*m/\<\/u\>\<\/b\>/g'           -e '/^ *$/d'     | tail -n +2;   echo $PREV_MONTH_TEXT$'\n'$NEXT_MONTH_TEXT; }
# increment year and/or month appropriately based on month increment
increment_month() {
  incr=$1;   (( delta += incr ))
  if (( incr != 0 )); then
    month=$(( 10#$month + incr ))
    if (( month > 0 )); then       (( month -= 1 ));       (( year += month/12 ));       (( month %= 12 ));       (( month += 1 ));     else       (( year += month/12 - 1 ));       (( month %= 12 ));       (( month += 12 ));     fi;   fi
  if (( delta == 0 )); then
    header=$(date "$DATEFTM");   else
    header=$(cal $month $year | sed -n '1s/^ *\(.*[^ ]\) *$/\1/p');   fi; }
###### Functions ######
###### Main body ######
get_current_date
# handle the click
# variables:
#   current_row: set means today row is highlighted
#   current_row: not set means...
#     bias_row ==  0: `next month` row is highlighted
#     bias_row == -1: `prev month` row is highlighted
#   selected: contains the selected row (next or prev month)
#   month_page: the month to be printed
case "$BLOCK_BUTTON" in   1)     if [[ $LEFTCLICK_PREV_MONTH == true ]]; then       increment_month -1;       bias_row=-1;     else       increment_month 0;       current_row=;     fi;     ;;   2)     increment_month 0;     current_row=;     ;;   3)     increment_month +1;     bias_row=0;     ;; esac
# rofi pop up
case "$BLOCK_BUTTON" in   1|2|3)
    while [[ "${selected+xxx}" != "xxx" ]] || [[ $selected =~ ($PREV_MONTH_TEXT|$NEXT_MONTH_TEXT) ]]; do       IFS=;       month_page=$(print_month $month $year);       if [[ "${current_row+xxx}" = "xxx" ]]; then         current_row=$(( $(echo $month_page | grep -n ${day#0} | head -n 1 | cut -d: -f1) - 1 ));       else         current_row=$(( $(echo $month_page | wc -l) - 1));       fi; 
      if [[ $BAR_POSITION = "top" ]]; then         anchor="northeast";       else         anchor="southeast";       fi; 
      selected="$(echo $month_page \
        | rofi \
            -dmenu \
            -markup-rows \
            -font $FONT \
            -m -3 \
            -theme-str 'window {width: 10%; anchor: '"$anchor"'; location: northwest;}' \
            -theme-str 'listview {lines: '"$(echo $month_page | wc -l)"' ;scrollbar: false;}' \
            -theme $ROFI_CONFIG_FILE \
            -selected-row $(( current_row + bias_row )) \
            -p "$header")"
      [[ $selected =~ $PREV_MONTH_TEXT ]] && { increment_month -1; bias_row=-1; };       [[ $selected =~ $NEXT_MONTH_TEXT ]] && { increment_month +1; bias_row=0; }
      unset current_row;     done; esac
# print blocklet text
echo $LABEL$(date "$DATEFTM")
echo $LABEL$(date "$SHORTFMT")
###### Main body ######
q
exit
